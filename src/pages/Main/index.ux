<template>
  <div class="page-wrapper main-page">
    <div class="progress">
      <text>{{ currentIndex + 1 }} / {{ poetries.length }}</text>
    </div>
    <swiper class="swiper" indicator="false" loop="true" @change='swiperUpdate'>
        <div for="{{ poetries }}" class="nice-detail wrapper-padding">
            <text class="title">{{$item.title}}</text>
            <text>{{$item.author}}</text>
            <text for="{{line in $item.lines}}" class="desc">
                <!-- <text>{{$idx}}</text> -->
                {{line}}
            </text>
        </div>
    </swiper>
    <div class="bottom-area wrapper-padding">
      <rating
        @change='ratingUpdate'
        numstars="5"
        rating="{{rating}}"
        stepsize="0.5"
        indicator="false"></rating>
    </div>
  </div>
</template>

<script>
  import router from '@system.router'
  import app from '@system.app'
  import storage from '@system.storage'
  import poetries from '../../data/poetries'

  const RATING_PREFIX = 'rating_'
  const appInfo = app.getInfo()

  export default {
    // 页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖
    private: {
      poetries: [],
      rating: 0,
      currentIndex: 0,
      msg: ''
    },

    protected: {
      title: appInfo.name,
      icon: appInfo.icon,
      currentTime: '',
    },

    onShow () {
      APP_STATISTICS.page_show(this)
      /**
       * @desc: 调用 API：global.$apis || this.$app._def.$apis (前者更简洁);
       */
      const params = { active: true }
      global.$apis.links.getAllLinksCount(params).then(result => {
        this.poetries = poetries
      }).catch((error) => {
        console.log(error)
      })
    },

    onHide() {
      APP_STATISTICS.page_hide(this)
    },

    onMenuPress () {
      this.$app.$def.showMenu()
    },

    onGotoDetailClick () {
      router.push({
        uri: '/pages/About'
      })
    },

    swiperUpdate ({index}) {
      this.currentIndex = index
      storage.get({
        key: RATING_PREFIX + index,
        success: (data) => {
          this.msg = data
          this.rating = data
        },
        fail: (data, code) => {
          this.rating = 0
          console.log('data', data, 'code', code)
        }
      })
    },

    ratingUpdate ({rating}) {
      let id = this.poetries[this.currentIndex].id
      storage.set({
        key: RATING_PREFIX + id,
        value: rating
      })
    }
  }
</script>

<style lang="less">
  @import './../../assets/styles/style.less';
  .main-page {
    .flex-box-mixins(column, center, center);
    width: 100%;
    .nice-detail {
      height: 100%;
      .flex-box-mixins(column, center, center);
    }
    .swiper {
      flex-direction: column;
      height: 100%;
      background-image: url('./../../assets/images/bg.jpeg');
      background-size: cover;
      background-position: top;
    }
    .bottom-area {
      .flex-box-mixins(row, center, center);
      width: 100%;
      height: 30 * @size-factor;
      background-color: @white-grey;
      .countup-text {
        color: @black;
        font-size: 6 * @size-factor;
      }
      .countup {
        font-size: 10 * @size-factor;
      }
    }
  }
  .progress {
    position: fixed;
    left: 10px;
    top: 10px;
  }
</style>
