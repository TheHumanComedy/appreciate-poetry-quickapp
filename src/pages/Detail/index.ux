<import name="tab-bar-item" src="./../../components/TabBarItem"></import>
<template>
  <div class="page-wrapper main-page">
    <div class="nice-detail wrapper-padding" if='poetry._id'>
      <text class="title">{{ poetry.title }}</text>
      <text>{{ poetry.author }}</text>
      <text for="{{ line in poetry.paragraphs }}" class="desc">
        {{line}}
      </text>
    </div>
    <div class="bottom-area wrapper-padding">
      <tab-bar-item index="0" path="./../../assets/icons/change.svg" @click="findMore"></tab-bar-item>
      <tab-bar-item index="1" path="{{favoritesPath}}" size="large" @click="favoriteUpdate"></tab-bar-item>
      <tab-bar-item index="2" path="./../../assets/icons/share.svg" @click="poetryShare"></tab-bar-item>
    </div>
  </div>
</template>

<script>
  import router from '@system.router'
  import app from '@system.app'
  import storage from '@system.storage'
  import share from '@system.share'
  import prompt from '@system.prompt'

  const FAVORITES = 'favoritesList'
  const appInfo = app.getInfo()

  export default {
    // 页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖
    private: {
      poetry: {},
      currentIndex: 0,
      favoritesList: {},
      favoritesPath: './../../assets/icons/favorites.svg'
    },

    protected: {
      id: '',
      title: appInfo.name,
      icon: appInfo.icon
    },

    onInit () {
      const poetries = this.$app.$def.poetries
      const poetry = poetries.find(p => p._id.toString() === this.id)
      if (poetry) {
        this.poetry = poetry
        this.$page.setTitleBar({ text: poetry.title})
      } else {
        prompt.showToast({
          message: '无数据记录' + this.id
        })
        setTimeout(() => {
          router.back()
        }, 300)
      }
      this.updateFavList()
    },

    onShow () {
      APP_STATISTICS.page_show(this)
      /**
       * @desc: 调用 API：global.$apis || this.$app._def.$apis (前者更简洁);
       */
      this.poetries = this.$app.$def.poetries
      const params = { active: true }
      // global.$apis.links.getAllLinksCount(params).then(result => {
      //   this.poetries = poetries
      // }).catch((error) => {
      //   console.log(error)
      // })
    },

    onHide() {
      APP_STATISTICS.page_hide(this)
    },

    favoriteUpdate () {
      const poetry = this.poetries[this.currentIndex]
      const id = poetry._id.toString()
      if(!this.favoritesList[id]){
        this.favoritesList[id] = poetry.title
      }else{
        delete this.favoritesList[id]
      }
      // console.log('list:'+JSON.stringify(this.favoritesList))
      this.iconCtrl(this.favoritesList[id])
      storage.set({
        key: FAVORITES,
        value: this.favoritesList
      })
    },

    updateFavList () {
      storage.get({
        key: FAVORITES,
        success: (data) => {
          try{
            if(data){
              this.favoritesList = JSON.parse(data)
            }
          }catch(e){
            console.log(e)
          }
        },
        fail: (data, code) => {
          console.log('data', data, 'code', code)
        }
      })
    },

    iconCtrl (show) {
      if(show){
        this.favoritesPath = './../../assets/icons/favorites.svg'
      }else{
        this.favoritesPath = './../../assets/icons/favorites_empty.svg'
      }
    },

    findMore () {
      // 换一批（用batchChange不知为何报错。）
      // 这里调用随机拉取接口，并替换poetries数据
    },

    poetryShare () {
      const poetry = this.poetry
      // 分享
      const shareData = poetry.title + '\n'
                  + poetry.author + '\n\n'
                  + poetry.paragraphs.join('\n\n')
                  + '\n\n' + '————来自诗文小札'
      share.share({
        type: 'text/html',
        data: shareData,
        success: function (data) {
          console.log('handling success')
        },
        fail: function (data, code) {
          console.log(`handling fail, code = ${code}`)
        }
      })
    }
  }
</script>

<style lang="less">
  @import './../../assets/styles/style.less';
  .main-page {
    .flex-box-mixins(column, center, center);
    width: 100%;
    background-image: url('./../../assets/images/bg.jpeg');
    background-size: cover;
    background-position: bottom;
    .nice-detail {
      height: 100%;
      .flex-box-mixins(column, center, center);
    }
    .swiper {
      flex-direction: column;
      height: 100%;
    }
    .bottom-area {
      .flex-box-mixins(row, center, center);
      width: 100%;
      height: 30 * @size-factor;
      background-color: @white-grey;
      .countup-text {
        color: @black;
        font-size: 6 * @size-factor;
      }
      .countup {
        font-size: 10 * @size-factor;
      }
    }
  }
  .progress {
    position: fixed;
    right: 10px;
    top: 10px;
  }
</style>
